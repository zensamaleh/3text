// Script de test pour l'int√©gration IA
import { aiService } from './src/lib/aiService.js'

async function testAIIntegration() {
  console.log('üß™ Test d\'int√©gration IA - GemCraft V2')
  console.log('=========================================')
  
  // Test 1: V√©rifier les mod√®les disponibles
  console.log('\nüìã Mod√®les disponibles:')
  const models = aiService.getAvailableModels()
  models.forEach(model => {
    console.log(`  - ${model}`)
  })
  
  // Test 2: V√©rifier la configuration des cl√©s API
  console.log('\nüîë Configuration des cl√©s API:')
  const openrouterKey = process.env.VITE_OPENROUTER_API_KEY
  const openaiKey = process.env.VITE_OPENAI_API_KEY
  
  console.log(`  - OpenRouter: ${openrouterKey ? '‚úÖ Configur√©e' : '‚ùå Manquante'}`)
  console.log(`  - OpenAI: ${openaiKey ? '‚úÖ Configur√©e' : '‚ùå Manquante'}`)
  
  // Test 3: Tester une requ√™te IA simple (si cl√© disponible)
  if (openrouterKey) {
    console.log('\nü§ñ Test de requ√™te IA simple...')
    try {
      const response = await aiService.generateResponse({
        model: 'google/gemini-2.0-flash-exp:free',
        messages: [
          { role: 'user', content: 'R√©ponds simplement "OK" pour tester la connexion.' }
        ],
        systemPrompt: 'Tu es un assistant de test. R√©ponds bri√®vement.',
        temperature: 0.1,
        maxTokens: 10
      })
      
      console.log('‚úÖ R√©ponse re√ßue:', response.content)
      console.log('üìä Usage:', response.usage)
      console.log('üéØ Mod√®le utilis√©:', response.model)
      
    } catch (error) {
      console.log('‚ùå Erreur lors du test:', error.message)
      console.log('Type d\'erreur:', error.type)
    }
  } else {
    console.log('\n‚ö†Ô∏è  Cl√© OpenRouter manquante, test de requ√™te ignor√©')
    console.log('   Ajoutez VITE_OPENROUTER_API_KEY dans votre fichier .env')
  }
  
  console.log('\n‚ú® Test termin√©!')
}

// Simuler l'environnement de variables
if (!globalThis.process) {
  globalThis.process = { env: {} }
}

// Simuler import.meta.env pour Node.js
if (!globalThis.import) {
  globalThis.import = {
    meta: {
      env: {
        VITE_OPENROUTER_API_KEY: process.env.VITE_OPENROUTER_API_KEY,
        VITE_OPENAI_API_KEY: process.env.VITE_OPENAI_API_KEY
      }
    }
  }
}

// Simuler l'objet window pour les headers
if (!globalThis.window) {
  globalThis.window = {
    location: {
      origin: 'http://localhost:5173'
    }
  }
}

// Simuler fetch pour Node.js (utiliser node-fetch si disponible)
if (!globalThis.fetch) {
  try {
    const { default: fetch } = await import('node-fetch')
    globalThis.fetch = fetch
  } catch (e) {
    console.log('‚ö†Ô∏è  node-fetch non disponible, test de requ√™te sera ignor√©')
    globalThis.fetch = () => Promise.reject(new Error('fetch non disponible'))
  }
}

// Ex√©cuter le test
testAIIntegration().catch(console.error)